package clearcut;

import javax.sql.DataSource;
import java.util.Properties;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.*;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;

import clearcut.Person;
import clearcut.PersonRepository;
import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

@RestController
public class GreetingController {
  private boolean started = false;

  // This means to get the bean called personRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  private PersonRepository personRepository;
  private static final String TEMPLATE = "Hello, %s!";

  @RequestMapping("/greeting")
  public HttpEntity<Greeting> greeting(
  @RequestParam(value = "name", required = false, defaultValue = "World") String name) throws Exception {

    Greeting greeting = new Greeting(String.format(TEMPLATE, name));
    greeting.add(linkTo(methodOn(GreetingController.class).greeting(name)).withSelfRel());

    if( ! started ) {
      started = true;
      startUp();
    }

    return new ResponseEntity<>(greeting, HttpStatus.OK);
  }

  @GetMapping(path="/add")     // Map ONLY GET Requests
  public @ResponseBody String addNewPerson (@RequestParam String name) {
    Person n = new Person();
    n.setName(name);
    personRepository.save(n);
    return String.format( "{\"name\": \"%s\", \"saved\": true}\n", name );
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Person> getAllPersons() {
    return personRepository.findAll();
  }

  public void startUp() throws Exception {
    List<Person> list = new ArrayList<Person>();
    Person n = new Person();
    n.setName("Joe Bloggs");
    list.add( n );
    n = new Person();
    n.setName("Joe Sixpack");
    list.add( n );
    BatchConfiguration batchConfiguration = new BatchConfiguration();
    DataSource dataSource = new MyDataSourceFactory().getMySQLDataSource();
    JdbcBatchItemWriter<Person> writer = batchConfiguration.writer( dataSource );
    writer.write( list );
  }

  private class MyDataSourceFactory {

    public DataSource getMySQLDataSource() throws IOException {
      Properties props = new Properties();
      FileInputStream fis = null;
      MysqlDataSource mysqlDS = null;
      File file = new File(".");
      String projectPath = file.getAbsolutePath();
      String propsFile = projectPath + "/src/main/resources/" + "application.properties";
      file = new File(propsFile);
      if( ! file.exists() ) throw new IOException( "File " + propsFile + " does not exist" );
      fis = new FileInputStream(file);
      props.load(fis);
      mysqlDS = new MysqlDataSource();
      mysqlDS.setURL(props.getProperty("spring.datasource.url"));
      mysqlDS.setUser(props.getProperty("spring.datasource.username"));
      mysqlDS.setPassword(props.getProperty("spring.datasource.password"));
      return mysqlDS;
    }
  }

}
